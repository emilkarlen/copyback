# Tests creating a new backup. The project is a "gzipped" directory project.
# Create a directory "archive" and unpack the tar archive there. Then compare
# the unpacked files to the original ones.
#
# Checks that
#   * a tared directory is created,
#   * the contents of the directory created is identical to the source directory,
#   * the backup has got the right name.
#
# Uses m4.
#

m4_include(common.m4) # m4

application:copyback
name:create-new-backup/dir-tar
home:..

M4_CheckNewBackupName_env_set # m4

test.run.cmdline/prepend-home:M4_SRC_BIN/copyback --root . --project-name-head --directory -z -c a_name ${SIMPTEST_HOME}/data/dir

check.prepare.replace-SIMPTEST-envvars/stdout

# Both a check and a preparation: gunzip the files inside the created
# directory.
# If this does not succeed the archive has not been created correctly.
# Then We get a NONTEST_ERROR, but this is really a FAIL.
check.prepare.run.cmdline:find $(cat ${SIMPTEST_STDOUT}) -type f -print0 | xargs -0 -exec gunzip

check.exitcode:0

# Check that exactly one file is created.
check.run.cmdline:test $(ls -A a_name | wc -l) == '1'

# Check that its contents is identical to the source.
check.compare.eq:data/dir:$(cat ${SIMPTEST_STDOUT})

# Check that the backup name is correct (as described in the Test Plan).
M4_CheckNewBackupName_check(`-r __SIMPTEST_TESTROOT__/a_name -E gzs')  # m4
